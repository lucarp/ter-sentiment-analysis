print(w1)
}
dim(df_x)
dim(df_x)[1]
dim(df_x)[2]
w <- []
w <- c()
w
w[0] <- 5
w
w[0]
w1 <- 0
for(i in 1:dim(lagrange)[1]){
sum <- alpha[i] * sv_x[i,1] * sv_y[i]
w1 <- w1 + sum
}
w2 <- 0
for(i in 1:dim(lagrange)[1]){
sum <- alpha[i] * sv_x[i,2] * sv_y[i]
w2 <- w1 + sum
}
w1
w2
temp <- vector()
temp
temp[0] = 1
temp
df_x
temp <- list()
temp
temp[0] <- 5
temp
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
plot(eq(x1))
plot(hyperplan(x1))
# - d
w0 <- res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
alpha <- abs(res_svm$coefs)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
sv_y <- c_temp[SV_index]
num_dim <- dim(df_x)[2]
# TODO - generalize depending on number of w
w1 <- 0
for(i in 1:dim(lagrange)[1]){
sum <- alpha[i] * sv_x[i,1] * sv_y[i]
w1 <- w1 + sum
}
w2 <- 0
for(i in 1:dim(lagrange)[1]){
sum <- alpha[i] * sv_x[i,2] * sv_y[i]
w2 <- w1 + sum
}
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
plot(hyperplan(x1))
plot(hyperplan(1:1000))
plot(x1, x2, col = c)
alpha_y <- res_svm$coefs
alpha_y
alpha_y * sv_x[,1]
sum(alpha_y * sv_x[,1])
w1 <- 0
for(i in 1:dim(lagrange)[1]){
sum <- alpha[i] * sv_x[i,1] * sv_y[i]
w1 <- w1 + sum
}
w1
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
w1
w2
# Problem 1
# - a
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
?svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
# - d
w0 <- res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
plot(hyperplan(1:1000))
max(x1)
x
plot(x1, x2, col = c)
alpha-y
alpha_y
sv_x[,1]
lines(x1, hyperplan(1:max(x1)))
lines(1:max(x1), hyperplan(1:max(x1)))
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
library("e1071")
# Problem 1
# - a
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
?svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
# - d
w0 <- res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# - b
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
# - d
w0 <- res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
hyperplan(0)
sv_x
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
# - d
w0 <- - res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
# Get support vectors
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
# - f
dev.off()
library("e1071")
# Problem 1
# - a
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
# - d
w0 <- - res_svm$rho
# - e
# 3 lagrange multipliers (alpha)
SV_index <- res_svm$index
# Get support vectors
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
w0
w1
w2
# - g
x_test = (2, 6)
# - g
x_test <- c(2, 6)
lines(1:max(x1), hyperplan(1:max(x1)))
margin_1 <- function(x){-w1/w2*x - 1/w2}
lines(1:max(x1), margin_1(1:max(x1)))
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
margin_1 <- function(x){-w1/w2*x - 1/w2}
lines(1:max(x1), margin_1(1:max(x1)))
margin_2 <- function(x){-w1/w2*x + 1/w2}
lines(1:max(x1), margin_2(1:max(x1)))
dev.off()
# plot
plot(x1, x2, col = c)
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(1:max(x1), hyperplan(1:max(x1)))
lines(xmin:xmax,  (w0+1-w1*c(xmin, xmax))/w2, lty=2)
xmin = min(x1)
xmax = max(x2)
lines(xmin:xmax, hyperplan(xmin:xmax))
lines(xmin:xmax,  (w0+1-w1*c(xmin, xmax))/w2, lty=2)
norm(c(1,2))
temp <- cbind(w1, w2)
lines(xmin:xmax, margin1(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1}
lines(xmin:xmax, margin1(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 - 1}
lines(xmin:xmax, margin2(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1}
lines(xmin:xmax, margin1(xmin:xmax))
margin2 <- function(x){-w1/w2*x - w0/w2 - 1}
lines(xmin:xmax, margin2(xmin:xmax))
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
dev.off()
# plot
plot(x1, x2, col = c)
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
xmin = min(x1)
xmax = max(x1)
lines(xmin:xmax, hyperplan(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1}
lines(xmin:xmax, margin1(xmin:xmax))
margin2 <- function(x){-w1/w2*x - w0/w2 - 1}
lines(xmin:xmax, margin2(xmin:xmax))
lines(xmin:xmax, margin1(xmin:xmax), lty=2)
dev.off()
# plot
plot(x1, x2, col = c)
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
xmin = min(x1)
xmax = max(x1)
lines(xmin:xmax, hyperplan(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1}
lines(xmin:xmax, margin1(xmin:xmax), lty=2)
lines(xmin:xmax, margin2(xmin:xmax), lty=2)
hyperplan(2)
aplha_y * dv_x * x_test + wo
alpha_y * dv_x * x_test + wo
alpha_y * sv_x * x_test + wo
alpha_y * sv_x * x_test + w0
alpha_y * sum(sv_x * x_test) + w0
sum(alpha_y * sum(sv_x * x_test) + w0)
w0
sv_x
sv_x * x_test
alpha_y * sv_x * x_test + w0
sum(alpha_y * sv_x * x_test + w0)
sum(sv_x * x_test)
sv_x * x_test
rowSums(sv_x * x_test)
colSums(sv_x * x_test)
rowSums(sv_x * x_test)
alpha_y * rowSums(sv_x * x_test) + w0
sum(alpha_y * rowSums(sv_x * x_test) + w0)
sv_x
x_test
w1
w2
y_test <- ifelse(sum(alpha_y * rowSums(sv_x * x_test) + w0) > 1, 1, -1)
y_test
y_test <- ifelse(sum(alpha_y * rowSums(sv_x * x_test) + w0) > 1, -1, 1)
y_test
plot(x1, x2, col = c, pch = ifelse(x1 == SV_index,1,0))
plot(x1, x2, col = c, pch = ifelse(x1 in SV_index,1,0))
plot(x1, x2, col = c, pch = ifelse(x1 %in% SV_index,1,0))
plot(x1, x2, col = c, pch = ifelse(x1 %in% SV_index,0,1))
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x,0,1))
plot(x1, x2, col = c, pch = ifelse((x1, x2) %in% sv_x,0,1))
plot(x1, x2, col = c, pch = ifelse(c(x1, x2) %in% sv_x,0,1))
sv_x
sv_x1 <- x1[SV_index]
sv_x1
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x1,0,1))
library("e1071")
# Problem 1
# - a
# create dataframe
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
# plot
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
# compute svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
SV_index <- res_svm$index
# highlight them
sv_x1 <- x1[SV_index]
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x1,0,1))
library("e1071")
# Problem 1
# - a
# create dataframe
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
# plot
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
# compute svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
SV_index <- res_svm$index
# highlight them
sv_x1 <- x1[SV_index]
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x1,0,16))
library("e1071")
# Problem 1
# - a
# create dataframe
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
# plot
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
# compute svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
SV_index <- res_svm$index
# highlight them
sv_x1 <- x1[SV_index]
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x1,16,1))
# - d
w0 <- - res_svm$rho
# - e
# Get support vectors
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
#num_dim <- dim(df_x)[2]
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
hyperplan <- function(x){-w1/w2*x - w0/w2}
xmin = min(x1)
xmax = max(x1)
lines(xmin:xmax, hyperplan(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1}
lines(xmin:xmax, margin1(xmin:xmax), lty=2)
margin2 <- function(x){-w1/w2*x - w0/w2 - 1}
lines(xmin:xmax, margin2(xmin:xmax), lty=2)
# - g
x_test <- c(2, 6)
y_test <- ifelse(sum(alpha_y * rowSums(sv_x * x_test) + w0) > 1, -1, 1)
y_test
w0
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(xmin:xmax, hyperplan(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1/w2}
lines(xmin:xmax, margin1(xmin:xmax), lty=2)
dev.off()
library("e1071")
# Problem 1
# - a
# create dataframe
c_temp <- c(rep(-1, times = 5), rep(1, times = 5))
c <- as.factor(c(rep(-1, times = 5), rep(1, times = 5)))
x1 <- c(1, 2, 4, 6, 8, 5, 7, 9, 12, 13)
x2 <- c(3, 1, 5, 9, 7, 1, 1, 4, 7, 6)
# plot
plot(x1, x2, col = c)
df <- data.frame("c" = c, "x1" = x1, "x2" = x2)
df_x <- df[, c("x1", "x2")]
df_y <- df$c
# - b
# compute svm
res_svm <- svm(x = df_x, y = df_y, kernel = "linear", cost = 100000, scale = FALSE, tol = 0.00000001, shrinkage = FALSE)
# - c
# 3 support vectors
res_svm$SV
SV_index <- res_svm$index
# highlight them
sv_x1 <- x1[SV_index]
plot(x1, x2, col = c, pch = ifelse(x1 %in% sv_x1,16,1))
# - d
w0 <- - res_svm$rho
# - e
# Get support vectors
sv_x <- df_x[SV_index,]
alpha_y <- res_svm$coefs
# TODO - generalize depending on number of w
#num_dim <- dim(df_x)[2]
w1 <- sum(alpha_y * sv_x[,1])
w2 <- sum(alpha_y * sv_x[,2])
# - f
xmin = min(x1)
xmax = max(x1)
hyperplan <- function(x){-w1/w2*x - w0/w2}
lines(xmin:xmax, hyperplan(xmin:xmax))
margin1 <- function(x){-w1/w2*x - w0/w2 + 1/w2}
lines(xmin:xmax, margin1(xmin:xmax), lty=2)
margin2 <- function(x){-w1/w2*x - w0/w2 - 1/w2}
lines(xmin:xmax, margin2(xmin:xmax), lty=2)
# - g
x_test <- c(2, 6)
y_test <- ifelse(sum(alpha_y * rowSums(sv_x * x_test) + w0) > 1, -1, 1)
y_test
# Problem 2
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/TER/ter-sentiment-analysis")
library(aricode)
library(R.matlab)
library(skmeans)
library("FactoMineR")
library(NMF)
# ------- Dataset loading -------
#X <- readMat("mat_files/output_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_30.csv_bow.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_50.csv_tf-idf-l2.mat")
X <- readMat("mat_files/output_not_original_10.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_5.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_no_clean.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_100.csv_tf-idf-l2.mat")
df <- X$X
#df
dim(df)
mat_df <- as.matrix(df)
dim(mat_df)
label <- read.csv("mat_files/dataset_LABEL.csv", header = FALSE)
k <- 5
labelK <- apply(label, MARGIN = 1, FUN=function(x) max(1, ceiling(x*k))) # true label (1 to k)
# ------- WC-NMTF -------
res_wc_nmtf <- read.csv("wc-nmtf_Z_l1_cos.csv", header = TRUE)
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
layout(matrix(1:2))
plot(labelK)
plot(label_res)
NMI(label_res, labelK)
ARI(label_res, labelK)
