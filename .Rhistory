library("ARI")
install.packages("ARI", dependencies = TRUE)
install.packages("ari", dependencies = TRUE)
lambdas <- c("10000.0", "1000.0", "100.0", "10.0", "1.0", "0.1", "0.01", "0.001", "0.0001", "1e-05", "0.0")
lambdas <- rev(lambdas)
cos_nmi <- c()
cos_ari <- c()
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
for(lambda in lambdas){
#file <- paste("result_wc_nmtf/lambda/cos/wc-nmtf_Z_l", lambda, ".csv", sep = "")
file <- paste("result_wc_nmtf/lambda/p_tra/wc-nmtf_Z_l", lambda, "_p_tra.csv", sep = "")
res_wc_nmtf <- read.csv(file, header = TRUE)
res_wc_nmtf <- t( normalize( t(res_wc_nmtf) ) )
label_res <- apply(res_wc_nmtf, MARGIN = 1, FUN=which.max)
t_nmi <- NMI(label_res, labelK)
t_ari <- ARI(label_res, labelK)
cos_nmi <- c(cos_nmi, t_nmi)
cos_ari <- c(cos_ari, t_ari)
}
temp = c(1:10)
matrix(c, nrow = 5)
matrix(temp, nrow = 5)
t <- Sys.time()
t2 <- Sys.time()
t2 - t
temp <- t2 - t
temp
plot(temp)
?dist
?svg
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/TER/ter-sentiment-analysis")
library(aricode)
library(R.matlab)
library(skmeans)
library("FactoMineR")
library(NMF)
normalize <- function(x) {x / sqrt(rowSums(x^2))}
normalizeByCol <- function(df) { t( normalize( t(df) ) )}
sent_process <- function(x){ x[1] - x[2] + 1 }
# -------------- Dataset loading --------------
#X <- readMat("mat_files/output_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_30.csv_bow.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf.mat")
#X <- readMat("mat_files/output_not_original_30.csv_tf-idf-l2.mat")
#X <- readMat("mat_files/output_not_original_50.csv_tf-idf-l2.mat")
X <- readMat("mat_files/output_not_original_10.csv_tf-idf-l2.mat")
df <- X$X
dim(df)
mat_df <- as.matrix(df)
mat_df <- normalize(mat_df)
dim(mat_df)
label <- read.csv("mat_files/dataset_LABEL.csv", header = FALSE)
k <- 5
labelK <- apply(label, MARGIN = 1, FUN=function(x) max(1, ceiling(x*k))) # true label (1 to k)
# - K means clustering
res <- kmeans(mat_df, centers = k)
length(res$cluster)
length(labelK)
# - Plot
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res$cluster, xlab = "Documents", ylab = "Cluster")
# -------------- Spherical K-means --------------
res2 <- skmeans(mat_df, k)
res2$cluster
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res2$cluster, xlab = "Documents", ylab = "Cluster")
# -------------- Spherical K-means --------------
res2 <- skmeans(mat_df, k)
res2$cluster
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res2$cluster, xlab = "Documents", ylab = "Cluster")
# -------------- Spherical K-means --------------
res2 <- skmeans(mat_df, k)
res2$cluster
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res2$cluster, xlab = "Documents", ylab = "Cluster")
# -------------- Spherical K-means --------------
res2 <- skmeans(mat_df, k)
res2$cluster
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res2$cluster, xlab = "Documents", ylab = "Cluster")
# -------------- Spherical K-means --------------
res2 <- skmeans(mat_df, k)
# ----------------- Autoencoder results -----------------
k0 <- read.csv("result_autoencoder/autoencoder_0_code.csv", row.names = 1)
k0_ind <- read.csv("result_autoencoder/autoencoder_0_ind.csv", row.names = 1)
k1 <- read.csv("result_autoencoder/autoencoder_1_code.csv", row.names = 1)
k1_ind <- read.csv("result_autoencoder/autoencoder_1_ind.csv", row.names = 1)
k2 <- read.csv("result_autoencoder/autoencoder_2_code.csv", row.names = 1)
k2_ind <- read.csv("result_autoencoder/autoencoder_2_ind.csv", row.names = 1)
k3 <- read.csv("result_autoencoder/autoencoder_3_code.csv", row.names = 1)
k3_ind <- read.csv("result_autoencoder/autoencoder_3_ind.csv", row.names = 1)
k4 <- read.csv("result_autoencoder/autoencoder_4_code.csv", row.names = 1)
k4_ind <- read.csv("result_autoencoder/autoencoder_4_ind.csv", row.names = 1)
res_ae = rbind(k0, k1, k2, k3, k4)
k_ind = rbind(k0_ind, k1_ind, k2_ind, k3_ind, k4_ind)
res_ae = res_ae[order(k_ind),]
label_res_ae <- apply(res_ae, MARGIN = 1, FUN=which.max)
layout(matrix(1:2))
plot(labelK)
plot(label_res_ae)
layout(matrix(1:2))
plot(labelK, xlab = "Documents", ylab = "Cluster")
plot(res2$cluster, xlab = "Documents", ylab = "Cluster")
