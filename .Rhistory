install.packages("FactoMineR", dependencies = TRUE)
install.packages("xlsx", repos = "http://cran.cnr.Berkeley.edu/")
install.packages("xlsx", repos = "http://cran.cnr.Berkeley.edu/")
install.packages("FactoMineR", dependencies = TRUE)
install.packages("openxlsx", dependencies=TRUE)
install.packages("FactoMineR", dependencies = TRUE)
install.packages("openxlsx", dependencies=TRUE)
library(installr)
install.packages("installr")
install.packages('openxlsx', type='source', repos='http://cran.rstudio.com')
var(5,4)
var(c(5,4))
var(c(2,1,6,2,5,1,1,1,2,2,1,5,4,1,1,1,1,3))
sd(c(2,1,6,2,5,1,1,1,2,2,1,5,4,1,1,1,1,3))
mean(c(2,1,6,2,5,1,1,1,2,2,1,5,4,1,1,1,1,3))
sd(c(2,1,6,2,5,1,1,1,2,2,1,5,4,1,1,1,1,3))
median(c(2,1,6,2,5,1,1,1,2,2,1,5,4,1,1,1,1,3))
install.packages("NMF", dependencies = TRUE)
install.packages("skmeans", dependencies = TRUE)
library(skmeans)
library(NMF)
install.packages("NMF", dependencies = TRUE)
install.packages("NMF", dependencies = TRUE)
library(NMF)
install.packages("NMF", dependencies = TRUE)
install.packages("NMF", dependencies = TRUE)
install.packages("openssl", dependencies = TRUE)
install.packages("NMF", dependencies = TRUE)
install.packages("Rmpi", dependencies = TRUE)
install.packages("Biobase", dependencies = TRUE)
clear
clear()
install.packages("NMF", dependencies = TRUE)
install.packages("doMPI", dependencies = TRUE)
install.packages("Rmpi", dependencies = TRUE)
install.packages("Rmpi", dependencies = TRUE)
install.packages("NMF", dependa)
install.packages("Rmpi", dependencies = TRUE)
install.packages("NMF", dependencies = TRUE)
library("NMF")
library("skmeans")
install.extras('NMF')
library(pixmap)
read.pnm('MtRush.pgm')
matrix(1:27, nrow = 4, ncol = 4)
matrix(1:27, ncol = 5)
matrix(1:30, ncol = 5)
x <- matrix(1:30, ncol = 5)
x
nmf(x, 3)
res <- nmf(x, 3)
res
?nmf
res
res@fit
res@fit@W
res@fit@H
x
res <- nmf(x, 1)
res
res <- nmf(x, 5)
res
res@fit@W
res <- nmf(x, 3)
getwd()
readMat("sparse_data.mat")
library("matlab")
install.packages("matlab")
library(matlab)
install.packages("matlab", dependencies = TRUE)
install.packages("matlab", dependencies = TRUE)
library(matlab)
install.packages("R.matlab", dependencies = TRUE)
library(R.matlab)
readMat("sparse_data.mat")
x <- readMat("sparse_data.mat")
x
library(R.matlab)
readMat("sparse_data.mat")
x <- readMat("sparse_data.mat")
x
library(cluster)
library(factoextra)
fviz_cluster(res)
fviz_cluster(res, data = df)
setwd("/media/matthieu/Data/Matthieu/##Etude/#M1/S2/TER/ter-sentiment-analysis")
library(R.matlab)
X <- readMat("mat_files/output_not_original.csv_tf-idf-l2.mat")
df <- X$X
df <- data.frame(df)
df
df <- data.frame(df)
df <- as.data.frame(as.matrix(df))
df
df <- X$X
df
# K-means
res <- kmeans(df, 5)
res
res$totss
# K-means
res <- kmeans(df, 5)
res$totss
df <- X$X
rng <- 2:10 #K from 2 to 20
tries <- 10 #Run the K Means algorithm 100 times
avg.totw.ss <- integer(length(rng)) #Set up an empty vector to hold all of points
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <- kmeans(data.rm.top,centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
}
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <- kmeans(df.rm.top,centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
}
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the 100 tries
for(i in 1:tries){
k.temp <- kmeans(df, centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
}
print("oui")
v <- 5
print("oui", 5)
print("oui", v)
print("oui"+v)
print("oui"v)
print("oui" v)
print("oui", v)
sprintf("v= %i", v)
rng <- 2:10 #K from 2 to 20
tries <- 10 #Run the K Means algorithm 100 times
avg.totw.ss <- integer(length(rng)) #Set up an empty vector to hold all of points
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the 100 tries
sprintf("v = %i", v)
for(i in 1:tries){
sprintf("i = %i", i)
k.temp <- kmeans(df, centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
}
for(v in rng){
sprintf("v = %i", v)
}
for(v in rng){
print(sprintf("v = %i", v))
}
rng <- 2:10 #K from 2 to 20
tries <- 10 #Run the K Means algorithm 100 times
avg.totw.ss <- integer(length(rng)) #Set up an empty vector to hold all of points
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the 100 tries
print(sprintf("v = %i", v))
for(i in 1:tries){
print(sprintf("i = %i", i))
k.temp <- kmeans(df, centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
}
plot(rng, avg.totw.ss, type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
library(skmeans)
?skmeans
skmeans(df, 5)
x <- skmeans(df, 5)
rng <- 2:10 #K from 2 to 20
tries <- 10 #Run the K Means algorithm x times
rng <- 2:10 #K from 2 to 20
tries <- 10 #Run the K Means algorithm x times
avg.totw.ss <- integer(length(rng)) #Set up an empty vector to hold all of points
avg.rsquared <- integer(length(rng)) #Set up an empty vector to hold all of points
for(v in rng){ # For each value of the range variable
v.totw.ss <- integer(tries) #Set up an empty vector to hold the x tries
v.rsquared <- integer(tries) #Set up an empty vector to hold the x tries
print(sprintf("-- v = %i", v))
for(i in 1:tries){
print(sprintf("i = %i", i))
k.temp <- kmeans(df, centers=v) #Run kmeans
v.totw.ss[i] <- k.temp$tot.withinss #Store the total withinss
v.rsquared[i] <- k.temp$betweenss / k.temp$tot.withinss
}
avg.totw.ss[v-1] <- mean(v.totw.ss) #Average the total withinss
avg.rsquared[v-1] <- mean(v.rsquared) #Average the R-squared
}
plot(rng, avg.totw.ss, type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
plot(rng, avg.rsquared, type="b", main="R squared by Various K",
ylab="Average R squared",
xlab="Value of K")
plot(rng, avg.totw.ss, type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
plot(rng, avg.rsquared, type="b", main="R squared by Various K",
ylab="Average R squared",
xlab="Value of K")
plot(rng, avg.totw.ss, type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
plot(rng, avg.rsquared, type="b", main="R squared by Various K",
ylab="Average R squared",
xlab="Value of K")
plot(rng, avg.totw.ss, type="b", main="Total Within SS by Various K",
ylab="Average Total Within Sum of Squares",
xlab="Value of K")
